
// function addNums(num1, num2) {
//   return num1 + num2;
// }

// addNums(1, 3);

const addNums = (num1, num2) => num1 + num2;

addNums(1,2);


const addANums = num1 => num1 + 5;


// todos.forEach((todo) => console.log(todo));



// lexical this;
// ES6 class 
  
//  constructor function
// function Person(firstname, lastname, dob) {
//   this.firstname = firstname;
//   this.lastname = lastname; 
//   this.dob = dob;
// }
  


//instantiate object
const person1 = new Person('john', 'Doe', "4-3-1980");

console.log(person1);




// BASIC syntax
(param1, param2, …, paramN) => { statements } 
(param1, param2, …, paramN) => expression
// equivalent to: => { return expression; }


const addNums = (num1, num2) => {num1 + num2};

// Parentheses are optional when there's only one parameter name:
(singleParam) => { statements }
singleParam => { statements }

// The parameter list for a function with no parameters should be written with a pair of parentheses.
() => { statements }


// advanced syntax
// Parenthesize the body of function to return an object literal expression:
params => ({foo: bar})

// Rest parameters and default parameters are supported
(param1, param2, ...rest) => { statements }
(param1 = defaultValue1, param2, …, paramN = defaultValueN) => { 
statements }

// Destructuring within the parameter list is also supported
var f = ([a, b] = [1, 2], {x: c} = {x: a + b}) => a + b + c;
f(); // 6


let [firstName, middleName, lastName] = []

for (const income of incomes) {
  console.log(income)
}

